# Question 3 - Multivariate Time Series Modelling
# Complete Python Code for all parts (a to k)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.api import VAR
from statsmodels.tsa.stattools import adfuller, acf
from statsmodels.tsa.filters.hp_filter import hpfilter
from statsmodels.tsa.filters.bk_filter import bkfilter
from sklearn.metrics import mean_squared_error, mean_absolute_error
import warnings
warnings.filterwarnings("ignore")

# ============================
# Part (a): Data Collection
# ============================
# Load quarterly GPR data
monthly_gpr = pd.read_csv("data_gpr_export.csv")
monthly_gpr['DATE'] = pd.to_datetime(monthly_gpr['DATE'])
monthly_gpr.set_index('DATE', inplace=True)

# Resample monthly GPR to quarterly
quarterly_gpr = monthly_gpr.resample('Q').mean()
quarterly_gpr = quarterly_gpr.loc["2000-03-31":"2023-12-31"]

# ============================
# Part (b): HP Filter for Trend-Cycle Decomposition
# ============================
cycle, trend = hpfilter(quarterly_gpr['GPR'], lamb=1600)
plt.figure(figsize=(10,5))
plt.plot(quarterly_gpr.index, trend, label='Trend')
plt.plot(quarterly_gpr.index, cycle, label='Cycle')
plt.title("Figure 1: Trend and Cycle of U.S. GPR Index (2000–2023)")
plt.legend()
plt.tight_layout()
plt.savefig("Figure1_Trend_Cycle_GPR_Corrected.png")
plt.close()

# ============================
# Part (c): Transformation and Stationarity
# ============================
transformed = pd.DataFrame(index=quarterly_gpr.index)
transformed['dGPR'] = quarterly_gpr['GPR'].diff()
transformed['dGPR_Threats'] = quarterly_gpr['GPR_Threats'].diff()
transformed['dGPR_Acts'] = quarterly_gpr['GPR_Acts'].diff()

# Drop NA from differencing
transformed.dropna(inplace=True)

# ADF Tests
for col in transformed.columns:
    result = adfuller(transformed[col])
    print(f"ADF test for {col}: statistic={result[0]:.2f}, p-value={result[1]:.3f}")

# ============================
# Part (d): Time Series Plots
# ============================
plt.figure(figsize=(12, 6))
for i, col in enumerate(['dGPR', 'dGPR_Threats', 'dGPR_Acts']):
    plt.plot(transformed.index, transformed[col], label=col)
plt.title("Figure 2: Time Series Plots for All Variables (2000Q1–2023Q4)")
plt.legend()
plt.tight_layout()
plt.savefig("Figure 2: Time Series Plots for All Variables (2000Q1–2023Q4).png")
plt.close()

# ============================
# Part (e): VAR Model Estimation
# ============================
model = VAR(transformed)
selected_lag = model.select_order(8)
print("Lag Order Selection:")
print(selected_lag.summary())

var_result = model.fit(2)
print(var_result.summary())

# ============================
# Part (f): Actual vs Fitted & ACF of Residuals
# ============================
fitted = var_result.fittedvalues
plt.figure(figsize=(8, 4))
plt.plot(transformed.index[2:], transformed['dGPR'][2:], label="Actual")
plt.plot(fitted.index, fitted['dGPR'], label="Fitted")
plt.title("Figure 3: Actual vs Fitted Values (GPR)")
plt.legend()
plt.tight_layout()
plt.savefig("Figure 3: Actual vs Fitted Values (GPR).png")
plt.close()

residuals = var_result.resid
acf_vals = acf(residuals['dGPR'])
plt.figure(figsize=(6, 4))
plt.stem(acf_vals, use_line_collection=True)
plt.title("Figure 4: ACF of VAR Residuals (GPR)")
plt.tight_layout()
plt.savefig("Figure 4: ACF of VAR Residuals (GPR).png")
plt.close()

# ============================
# Part (g): Out-of-Sample Forecasting
# ============================
train = transformed[:-32]
test = transformed[-32:]
model_oos = VAR(train)
var_oos = model_oos.fit(2)
forecast = var_oos.forecast(train.values[-2:], steps=32)
forecast_df = pd.DataFrame(forecast, index=test.index, columns=test.columns)

plt.figure(figsize=(10, 5))
plt.plot(test.index, test['dGPR'], label="Actual")
plt.plot(test.index, forecast_df['dGPR'], label="Forecast")
plt.title("Figure 5: Out-of-Sample Forecasts vs Actual GPR (2015–2023)")
plt.legend()
plt.tight_layout()
plt.savefig("Figure 5: Out-of-Sample Forecasts vs Actual GPR (2015–2023).png")
plt.close()

# ============================
# Part (j): HP vs Baxter-King Trends
# ============================
bk_cycle = bkfilter(quarterly_gpr['GPR'], low=6, high=32, K=12)
plt.figure(figsize=(10, 5))
plt.plot(quarterly_gpr.index, trend, label='HP Trend')
plt.plot(bk_cycle.index, bk_cycle, label='BK Trend')
plt.title("Figure 6: Comparison of HP vs Baxter-King Trends")
plt.legend()
plt.tight_layout()
plt.savefig("Figure 6: Comparison of HP vs Baxter-King Trends.png")
plt.close()
